name: Build and deploy Aseprite

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master
      - fix

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.aseprite_release.outputs.tag }}
      should_build: ${{ steps.decision.outputs.should_build }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Provides context for `gh` to read the repo name
    - name: Get latest Aseprite release info
      id: aseprite_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use gh's --jq flag to directly extract the tag and body, avoiding template errors.
        LATEST_TAG=$(gh release view --repo aseprite/aseprite --json tagName --jq .tagName)
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

        gh release view --repo aseprite/aseprite --json body --jq .body > release_notes.md
    - name: Get latest built release tag
      id: built_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the tag of the latest release in this repo. Fails gracefully if no releases exist.
        # This requires the GITHUB_TOKEN to see draft releases.
        tag=$(gh release list --draft=true --limit 1 --json tagName -q '.[0].tagName' || echo "none")
        echo "tag=$tag" >> $GITHUB_OUTPUT
    - name: Decide if we should build
      id: decision
      # Build if:
      # 1. Manually triggered with workflow_dispatch or on the 'fix' branch.
      # 2. The latest Aseprite tag is different from our latest built tag.
      if: |
        github.event_name == 'workflow_dispatch' ||
        github.ref == 'refs/heads/fix' ||
        steps.aseprite_release.outputs.tag != steps.built_release.outputs.tag
      run: echo "should_build=true" >> $GITHUB_OUTPUT
    - name: Create Draft Release
      if: steps.decision.outputs.should_build == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.aseprite_release.outputs.tag }} \
          --draft \
          --title "Aseprite ${{ steps.aseprite_release.outputs.tag }}" \
          --notes-file release_notes.md

  build-aseprite:
    name: Build Aseprite on ${{ matrix.os }}
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Per the README, edit this list to only include the OSes you need.
        os:
          - ubuntu-latest
          # - windows-latest
          # - macOS-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Provides context for gh release upload
      - name: Get current date
        id: date
        shell: bash
        run: echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: (Windows) Remove OpenSLL from PATH
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: Remove-Item -Recurse -Force "C:\Program Files\OpenSSL\"
      - name: (Ubuntu) Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install -y cmake ninja-build libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig-dev
      - name: (macOS) Install dependencies
        if: matrix.os == 'macOS-latest'
        run: brew install ninja p7zip
      - name: Get Skia from cache
        id: skia-cache
        uses: actions/cache@v3
        with:
          path: skia
          key: skia-${{ matrix.os }}-cache
      - name: Download Skia if not in cache
        if: steps.skia-cache.outputs.cache-hit != 'true'
        # This Skia version (m124) is for Aseprite v1.3.x.
        # It might need to be updated for future Aseprite versions.
        # See: https://github.com/aseprite/aseprite/blob/main/INSTALL.md#skia-dependency
        run: |
          curl -o Skia-Release.zip -L https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-${{ runner.os }}-Release-x64.zip
          unzip Skia-Release.zip -d skia
      - name: Checkout Aseprite source code
        uses: actions/checkout@v4
        with:
          repository: aseprite/aseprite
          ref: ${{ needs.check-version.outputs.latest_tag }}
          path: aseprite
          submodules: 'recursive'
      - name: Create build directory
        run: mkdir -p aseprite/build
      - name: (Windows) Set architecture for the produced binary
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
      - name: (Windows) Setting Visual Studio build environment variables and paths
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
      - name: (Windows) Run CMake
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build
        shell: pwsh
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/' -DLAF_BACKEND=skia -DSKIA_DIR="$(Convert-Path ../../skia)" -DSKIA_LIBRARY_DIR="$(Convert-Path ../../skia/out/Release-x64)" -DSKIA_LIBRARY="$(Convert-Path ../../skia/out/Release-x64/skia.lib)" -G Ninja ..
      - name: (Ubuntu) Run CMake
        if: matrix.os == 'ubuntu-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=$(realpath ../../skia) -DSKIA_LIBRARY_DIR=$(realpath ../../skia/out/Release-x64) -G Ninja ..
      - name: (macOS) Run CMake
        if: matrix.os == 'macOS-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DLAF_BACKEND=skia -DSKIA_DIR=$(realpath ../../skia) -DSKIA_LIBRARY_DIR=$(realpath ../../skia/out/Release-x64) -G Ninja ..
      - name: Run Ninja
        working-directory: aseprite/build
        run: ninja aseprite
      - name: Clean up build
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest
      - name: (Windows) Make portable zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
      - name: Create release
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}-${{ steps.date.outputs.today }}.zip *
      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ needs.check-version.outputs.latest_tag }} aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}-${{ steps.date.outputs.today }}.zip --clobber
